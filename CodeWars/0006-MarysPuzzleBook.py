import timeit
import unittest
import random

# loop through each number
# continue to add each concurrent number to a running total providing it isn't 0
# if the number is 0, append total to a temp array and set total back to 0
# return the max value from the temp array

# ---------- Initial Solution ----------
def largest_sum(s):
    total = 0
    temp = []

    for num in s:
        if int(num) == 0:
            temp.append(total)
            total = 0
        else:
            total += int(num)

    return max(temp)

# ---------- Final Solution ----------
def largest_sum_modified(s):
    return max(sum(map(int, x)) for x in s.split('0'))

# ---------- Tests ----------
class Test(unittest.TestCase):
    def testEquals(self):
        for data in testData:
          self.assertEqual(largest_sum_modified(data[0]), data[1])

#  ---------- Testing Data ----------
testData = [
    ["72102450111111090", 11],
    ["123004560", 15],
    ["0", 0],
    ["4755843230", 41],
    ["3388049750", 25],
    ["3902864190", 30],
    ["4098611970", 41],
    ["5628206860", 23],
    ["5891002970", 23],
    ["0702175070", 15]
]

if __name__ == '__main__':
    # ---------- Timing tests ----------
    # randS = "993495872941073587053199247362567410055885397919263713836893716453238740248358920126519806141086357014925700211272958280348437564757773526211017556391413570354828697556732115371013573935775522392811969207317731916716348857254376625009367658566626451900930081959217136925270904394715407064440466738328964319159710476037320782197245406985157514839740472705128206624680338314243683703075519337067919834358144279430320230135759151570755272054685087472712842978698202859881744780886874282433138774991666495516356579711077136305032011551353286231919119023516616955958288525532515071486196606131537601730544272690077898819302338934368471783200125574979011220452486758707392621805897421121191612644425468789720012124050181933617009905177766438899110503119444756588052945402648708639032145311986742562723721676650081860036702455893322938627036242968704427803325472981591789824380617150221755172518922353865764584257890622610182247129271479786531613914331793461223087520920012350370112611223430872917741327803903592282144832529295222604100029220222664478334404573751991820130788953523469957177203758829527851808481898634543451901101706545354744933216225994040129097480024280170376171543109527476034669256404112615243078144065055180320392958936072070366942930612366753758891498569774490292900082760026317233546739665382810078696501927975647913503119345218957892182466439022524339870996111653235824608074390002643814323912240374209247318987200493071019012354304579729864536948925594265909451576161714264652762909282235535077148070474952136278043596797089715391220704265825059671616795898677829519972115014339078938594173294693405270444189208407131720845900169336510312624422504547972487590943814684304786995693097945755204172949124294033564852025726574226792735571863213640336355281747764949456035318198732584019875417601519215244516824073200431697192987445349309248493762704093996092538513352995469969546784015772714003330937488009221897058310024757906483781464192600084705360155259810473241547393151808761700031780687359203427741363845031126153826777982796619707796183291300525276363425935195065013533631222634330122730930260553690559962669114091163642213646770456722622330113982158870971664793559979311997713748548152034728314815686976410296928216521098497778386767555806725176551325425964250234194126747973481013323382657460026215377346273183359990260759311008241204574150835522606037446199959933598507357901389258211359493495972991643148363521794974472149481147411484593722869014763181547643407745288028433354608864916017976050906477495716484603486198537458356299421655209428721359819624565601761684754591514765467766192182519121399973764795613971279292309596440332047663606974973162453766756109712944837190782414466098638664801692922068836048448775169496394598194946603708900810019421583885756791770964517189094347746646910351026290281317840518679547521023201781114460418225721795515588310890969331539963553404908644245673637921413986863601788891930256838808034214646699316364516622156965991603127185411684"

    # print(f'Largest Sum Function: {timeit.timeit(lambda: largest_sum(randS), number=1000000)}')
    # print(f'Largest Sum Modified Function: {timeit.timeit(lambda: largest_sum_modified(randS), number=1000000)}')

    # Time Results:
    # largest_sum: 619.1726856000005
    # largest_sum_modified: 270.7611418999986

    # ---------- Results ----------
    for data in testData:
        result = largest_sum_modified(data[0])
        print(result)
    
    # ---------- Run Tests ----------
    unittest.main()